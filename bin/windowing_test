#!/usr/bin/env ruby

require 'bundler'
Bundler.setup(:default, :development)

require 'pry'
require 'matrix'
require 'wavefile'
require_relative '../lib/pgm'

def read_wav_channel_into_frames(wav, channel:, frame_starts:)
  # Ignore everything in the line until this point:
  min_line_length = 3_120

  # Give up after this point:
  max_line_length = 3_300

  min_line_end_length = max_line_length - min_line_length
  frames = []
  WaveFile::Reader.new(wav) do |reader|
    frame_starts.each do |frame_start|
      previous_frame_ended_at = reader.current_sample_frame

      # Ignore the samples between the end of the last frame and the sample this frame starts from.
      reader.read(frame_start - previous_frame_ended_at)

      lines = []
      line_limit = 505 # Arbitrary guess; should be 512, but I don't think that's gonna work.
      current_line_samples = []
      while lines.length < line_limit
        current_line_samples.concat(
          reader
            .read(min_line_length - current_line_samples.length)
            .samples
            .map(&channel)
        )

        # Look ahead a certain amount, and pick the lowest spike within it:
        # that's the end of our line.

        lookahead_buffer = reader.read(min_line_end_length).samples.map(&channel)
        lowest_index = lookahead_buffer.each_with_index.min[1]

        # Then:
        # - Take the stuff before it and add it to the current line.
        current_line_samples.concat lookahead_buffer[0..(lowest_index-1)]
        lines.push current_line_samples
        ###puts [
        ###  current_line_samples.length,
        ###  reader.current_sample_frame.to_s.gsub(/\d(?=(...)+$)/, '\0,'),
        ###].inspect

        # - Take the stuff after it and keep it for the next line.
        #   (Put the rest in the current_line_samples for next round.)
        current_line_samples = lookahead_buffer[lowest_index..-1]
      end

      frames << lines
    end
  end
  #puts "Frame line lengths: #{frames.map {|lines| lines.map(&:length).join(', ') }.join('; ')}"
  frames
end

def rescale_lines_for_image(lines, new_min_value:, new_max_value:)
  min_value = lines.map(&:min).min
  max_value = lines.map(&:max).max
  lines.map do |line|
    line.map do |input|
      new_max_value - (
        (input - min_value) * (new_max_value - new_min_value) / (max_value - min_value) + new_min_value
      ).floor
    end
  end
end

def normalise_line_lengths(lines)
  min_row_length = lines.map(&:length).min
  gutter_length = 600
  lines.map do |row|
    row[0..(min_row_length - 1 - gutter_length)]
  end
end

def rotate_lines(lines)
  Matrix[*lines].transpose.to_a
end

def lines_to_image(lines, filename)
  # HACK: Chop down to the smallest frame.
  lines = normalise_line_lengths(lines)
  lines = rescale_lines_for_image(lines, new_min_value: 0, new_max_value: 255)
  lines = rotate_lines(lines)
  height = lines.length
  width = lines[0].length
  PGM.new(filename, width, height) do |img|
    for row_idx in 0...(lines.length)
      img << lines[row_idx][0..width-1]
    end
  end
end

def ex1
  wav_path = File.expand_path('../384kHzStereo.wav', File.dirname(__FILE__))

  left_frames = read_wav_channel_into_frames(
    wav_path,
    channel: :first,
    frame_starts: [
      6_016_643,
      8_322_787,
      10_674_494,
      12_952_938,
      15_211_460,
      17_441_174,
      19_629_977, # uh
      33_278_344,
      35_451_346,
      39_885_982,
      41_984_944,
    ],
  )
  #right_frames = read_wav_channel_into_frames(
  #  wav_path,
  #  channel: :last,
  #  start_from_sample: 0,
  #  end_at_sample: 50,
  #)
  right_frames = []

  frames = left_frames + right_frames

  frames.each_with_index.map do |lines, index|
    filename = File.expand_path("../frame-#{index + 1}.pgm", File.dirname(__FILE__))
    lines_to_image(lines, filename)
    puts `convert #{filename} -resize 505x379: #{filename}_resized.png && imgcat #{filename}_resized.png`
  end
end

ex1; puts "======\n";
